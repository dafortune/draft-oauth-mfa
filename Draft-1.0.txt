



Network Working Group                                          J. Hanson
Internet-Draft                                                Auth0 Inc.
Expires: September 2, 2017                                 March 1, 2017


                  OAuth 2.0 Multi-Factor Authorization
                     draft-hanson-oauth-mfa-latest

Abstract

   This specification provides a framework for the use of strong
   authorization with OAuth 2.0.  Mechanisms are specified for
   initiating an authorization session.  New authorization grant types
   are defined that allow clients to obtain access tokens within the
   context of a strongly authorized session.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 2, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.




Hanson                  Expires September 2, 2017               [Page 1]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization        March 2017


1.  Introduction

   Strong authorization is a method of access control that grants access
   only after multiple factors of authentication and/or authorization
   have been presented.  Authentication factors typically fall into the
   following categories: knowledge (something you know), possession
   (something you have), and inherence (something you are).  Strong
   authorization factors include transaction confirmation and multi-
   party authorization.

   OAuth 2.0 [RFC6749] is an authorization framework that enables a
   third-party application to obtain limited access to a protected HTTP
   resource.  In OAuth, those third-party applications are called
   clients; they access protected resources by presenting an access
   token to the HTTP resource.  Access tokens are issued to clients by
   an authorization server with the (sometimes implicit) approval of the
   resource owner.  These access tokens are typically obtained by
   exchanging an authorization grant, which represents the authorization
   granted by the resource owner (or by a privileged administrator).

   This specification defines a general framework for the use of strong
   authorization within OAuth 2.0.  It provides a generic mechanism for
   indicating when strong authorization is required.  It defines
   additional extension grant types that allow strong authorization
   credentials to be presented in order to obtain access tokens.

   This use of strong authorization allows authorization servers to
   implement correspondingly strong authorization policies, including
   step-up authentication and transaction confirmation.

   Authorization servers that implement support for resource owner
   password credentials can augment existing password infrastructure by
   requiring a strong second factor of authentication prior to issuing
   access tokens.

   Transaction confirmation can be used to increase the level of
   assurance prior to issuing tokens for highly privileged operations,
   such as a bank withdrawl.  For example, an end-user (resource owner)
   can grant an application (client) access to her account at a
   brokerage firm (resource server).  The application is authorized to
   obtain real-time stock quotes as well as place orders, and is issued
   both an access token and refresh token.  As a matter of policy, the
   access token can be used to obtain stock quotes and is valid for 24
   hours.  Every 24 hour period, the refresh token is used to obtain a
   new access token, so that access to stock quotes is uninterrupted.
   The access token can also be used to place an order, but is subject
   to more stringent security requirements.  Using this extension, the
   refresh token can be used to initiate an authorization session which,



Hanson                  Expires September 2, 2017               [Page 2]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization        March 2017


   once confirmed by the user, allows issuance of an access token that
   demonstrates strong authentication and has a limited lifetime.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

1.2.  Terminology

   This specification also defines the following terms:

   MFA Token:

      A short-lived token representing an authorization session.

1.3.  Protocol Flow
































Hanson                  Expires September 2, 2017               [Page 3]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization        March 2017


     +----------+
     | Resource |
     |  Owner   |
     |          |
     +----------+
        v    v
        |    |
       (A)  (D)
        |    |
        v    v
     +---------+                                      +---------------+
     |         |>-(B)--- Authorization Grant -------->|               |
     |         |                                      |               |
     |         |<-(C)-------- MFA Token -------------<|               |
     |         |                                      | Authorization |
     |         |>-(E)---- Strong Authz Grant -------->|     Server    |
     |         |             & MFA Token              |               |
     |         |                                      |               |
     | Client  |<-(F)------- Access Token -----------<|               |
     |         |                                      +---------------+
     |         |
     |         |                                      +---------------+
     |         |>-(G)------- Access Token ----------->|               |
     |         |                                      |    Resource   |
     |         |<-(H)---- Protected Resource --------<|     Server    |
     |         |                                      |               |
     +---------+                                      +---------------+

                     Figure 1: Abstract Protocol Flow

   The abstract strong authorization flow illustrated in Figure 1
   describes the interaction between the resource owner, resource
   server, client, and authorization server and includes the following
   steps:

   (A)  The client obtains authorization from the resource owner.  The
        authorization can be obtained directly from the resource owner
        (as shown), or preferably indirectly via the authorization
        server as an intermediary.  The resource owner's authorization
        is represented as an authorization grant.

   (B)  The client requests an access token by authenticating with the
        authorization server and presenting the authorization grant.

   (C)  The authorization server authenticates the client and validates
        the authorization grant, and if strong authorization is
        required, returns an error along with an MFA token.




Hanson                  Expires September 2, 2017               [Page 4]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization        March 2017


   (D)  The resource owner provides the client with a strong
        authorization grant.

   (E)  The client requests an access token from the authorization
        server's token endpoint by including the strong authorization
        grant received from the resource owner along with the MFA token
        received during the prior access token request.  When making the
        request, the client authenticates with the authorization server.

   (F)  The authorization server authenticates the client and validates
        the MFA token and strong authorization grant, and if both are
        valid, issues an access token.

   (G)  The client requests the protected resource from the resource
        server and authenticates by presenting the access token.

   (H)  The resource server validates the access token, and if valid,
        serves the request.

2.  Protocol Endpoints

   The strong authorization process utilizes two authorization server
   endpoints (HTTP resources):

   o  Token endpoint - used by the client to exchange a strong
      authorization grant for an access token, as described in
      Section 3.2 of [RFC6749].

   o  MFA Challenge endpoint - used by the client to obtain a strong
      authorization challenge, the answer to which can be used as a
      strong authorization grant.

2.1.  Token Endpoint

   The token endpoint is used by the client to obtain an access token by
   presenting its authorization grant or refresh token, as described in
   Section 3.2 of [RFC6749].

   The token endpoint is also used by the client to initiate (or
   continue) an authorization session.  If the authorization server
   determines that a token request is unauthorized, due to an
   insufficiently strong authorization grant, the authorization server
   responds with an error response as described in Section 5.2 of
   [RFC6749].

   In addition to the error codes defined in Section 5.2 of [RFC6749],
   the following error codes are specific for the strong authorization
   flow:



Hanson                  Expires September 2, 2017               [Page 5]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization        March 2017


   mfa_required

      The authorization grant is insufficiently strong, The token
      request MAY succeed if repeated using a strong authorization
      grant.

   In addition to the response parameters defined in Section 5.2 of
   [RFC6749], the following parameters MUST be included in the response
   when the error code is set to mfa_required:

   mfa_token

      REQUIRED.  The MFA token used to continue the authorization
      session.

   The following is a non-normative example token error response
   indicating that strong authorization is required:

   HTTP/1.1 403 Forbidden
   Content-Type: application/json;charset=UTF-8
   Cache-Control: no-store
   Pragma: no-cache

   {
     "error":"mfa_required",
     "mfa_token": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjFlOWdkazcifQ.eyJpc3Mi
       OiJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwic3ViIjoiMjQ4Mjg5NzYxMDA
       xIiwiYXVkIjpbImh0dHA6Ly9zZXJ2ZXIuZXhhbXBsZS5jb20vdG9rZW4iLCJodH
       RwOi8vc2VydmVyLmV4YW1wbGUuY29tL2F1dGhlbnRpY2F0b3JzIl0sIm1mYSI6W
       yJvdHAiLCJvb2IiXSwiZXhwIjoxMzExMjgxOTcwLCJpYXQiOjEzMTEyODA5NzB9
       .IvjKKc54lHvAOCskyEUU8Ou_-8-oXKyFS5bbq-utZPA"
   }

2.2.  MFA Challenge Endpoint

   The MFA challenge endpoint is used by the client to obtain a strong
   authorization challenge.  The answer to this challenge, typically
   obtained by interacting with the resource owner, is a strong
   authorization grant which can be used to obtain an access token by
   presenting it at the token endpoint.

   Use of the MFA challenge endpoint is OPTIONAL; if a client knows of a
   suitable authenticator through an out-of-band mechanism, it can
   obtain a strong authorization grant directly.







Hanson                  Expires September 2, 2017               [Page 6]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization        March 2017


2.2.1.  MFA Challenge Request

   The client makes a request to the MFA challenge endpoint by sending
   the following parameters using the "application/x-www-form-
   urlencoded" format with a character encoding of UTF-8 in the HTTP
   request entity-body:

   mfa_token
         REQUIRED.  The MFA token received from the authorization
         server.

   challenge_type
         OPTIONAL.  The MFA challenge type strings that the client
         supports.  The value of the challenge_type parameter is
         expressed as a list of space-delimited, case-insensitive
         strings.

   If the client was issued client credentials (or assigned other
   authentication requirements), the client MUST authenticate with the
   authorization server as described in Section 3.2.1 of [RFC6749].

   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only)::

   POST /challenge HTTP/1.1
   Host: server.example.com
   Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
   Content-Type: application/x-www-form-urlencoded

   mfa_token=eyJhbGciOiJ...&challenge_type=otp%20oob

   If the client was issued client credentials (or assigned other
   authentication requirements), the client MUST authenticate with the
   authorization server as described in Section 3.2.1 of [RFC6749].

   The authorization server MUST:

   o  require client authentication for confidential clients or for any
      client that was issued client credentials (or with other
      authentication requirements),

   o  authenticate the client if client authentication is included,

   o  ensure the MFA token was issued to the authenticated confidential
      client, or if the client is public, ensure the MFA token was
      issued to "client_id" in the request,

   o  verify that the MFA token is valid, and



Hanson                  Expires September 2, 2017               [Page 7]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization        March 2017


   o  restore the authorization session based on the claims in the MFA
      token.

2.2.2.  MFA Challenge Response

   If the MFA challenge request is valid and authorized, the
   authorization server selects an authorization mechanism that would
   satisfy the authorization session, issues a challenge, and constructs
   the response by adding the following parameters to the entity-body of
   the HTTP response with a 200 (OK) status code:

   challenge_type
         REQUIRED.  The type of the MFA challenge issued.  Value is case
         insensitive.

   The parameters are included in the entity body of the HTTP response
   using the "application/json" media type as defined by [RFC4627].  The
   response MAY include additional parameters that are interpreted
   according to a challenge type definition.

3.  Obtaining Authorization using Strong Authorization

3.1.  OTP Credentials Grant

   An one-time password is generated by an OTP device, which includes
   hardware devices as well as software-based OTP generators on devices
   such as mobile phones.

3.1.1.  MFA Challenge Response

   If the resource owner has a registered OTP device, the authorization
   server signals the device, if possible, and responds with a challenge
   containing the following parameters:

   challenge_type

      REQUIRED.  Value MUST be set to "otp".

3.1.2.  User Interaction

   After receiving an OTP challenge, the client prompts or otherwise
   interacts with the resource owner to obtain a one-time password
   generated by a device in the posession of the resource owner.








Hanson                  Expires September 2, 2017               [Page 8]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization        March 2017


3.1.3.  Access Token Request

   The client makes a request to the token endpoint by adding the
   following parameters using the "application/x-www-form-urlencoded"
   format per Appendix B with a character encoding of UTF-8 in the HTTP
   request entity-body:

   grant_type

      REQUIRED.  Value MUST be set to "http://auth0.com/oauth/grant-
      type/mfa-otp".

   otp

      REQUIRED.  The one-time password.

   mfa_token

      REQUIRED.  The MFA token received when initiating the
      authorization session.

3.1.4.  Access Token Response

   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in in Section 5.1 of [RFC6749].  If the request
   failed client authentication or is invalid, the authorization server
   returns an error response as described in Section 5.2 of [RFC6749].

3.2.  Out-of-Band Verification Code Grant

   An out-of-band verification code is used to obtain authorization via
   an out-of-band mechanism.

3.2.1.  MFA Challenge Response

   The authorization server orchestrates an out-of-band authorization
   interaction, and responds with a challenge containing the following
   parameters:

   challenge_type

      REQUIRED.  Value MUST be set to "oob".

   oob_code

      REQUIRED.  The out-of-band transaction code generated by the
      authorization server.  The out-of-band transaction code MUST



Hanson                  Expires September 2, 2017               [Page 9]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization        March 2017


      expire shortly after it is issued to mitigate the risk of leaks.
      A maximum authorization code lifetime of 10 minutes is
      RECOMMENDED.

3.2.2.  User Interaction

   After receiving an out-of-band challenge, the client prompts or
   otherwise interacts with the resource owner to inform them of the
   ongoing authorization ceremony.

3.2.3.  Access Token Request

   The client makes a request to the token endpoint by adding the
   following parameters using the "application/x-www-form-urlencoded"
   format per Appendix B with a character encoding of UTF-8 in the HTTP
   request entity-body:

   grant_type

      REQUIRED.  Value MUST be set to "http://auth0.com/oauth/grant-
      type/mfa-oob".

   oob_code

      REQUIRED.  The out-of-band verification code.

   mfa_token

      REQUIRED.  The MFA token received when initiating the
      authorization session.

3.2.4.  Access Token Response

   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in in Section 5.1 of [RFC6749].  If the request
   failed client authentication or is invalid, the authorization server
   returns an error response as described in Section 5.2 of [RFC6749].

   In addition to the error codes defined in Section 5.2 of [RFC6749],
   the following error codes are specific for the out-of-band
   verification code grant:

   authorization_pending

      The authorization request is still pending as the authorization
      ceremony has not yet completed.  The client should repeat the
      Access Token Request to the token endpoint.



Hanson                  Expires September 2, 2017              [Page 10]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization        March 2017


   slow_down

      The client is polling too quickly and should back off at a
      reasonable rate.

   expired_token

      The "oob_code" has expired.  The client will need to initiate a
      new authorization session.

4.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627,
              DOI 10.17487/RFC4627, July 2006,
              <http://www.rfc-editor.org/info/rfc4627>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <http://www.rfc-editor.org/info/rfc6749>.

Author's Address

   Jared Hanson
   Auth0 Inc.

   Email: jaredhanson@gmail.com
   URI:   http://www.jaredhanson.net/


















Hanson                  Expires September 2, 2017              [Page 11]
