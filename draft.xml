<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>      
<!ENTITY rfc4287 SYSTEM 'bibxml/reference.RFC.4287.xml'>      
<!ENTITY xmlns SYSTEM 'bibxml/reference.W3C.REC-xml-names-19990114.xml'>      
<!ENTITY rdfsg SYSTEM 'bibxml/reference.W3C.WD-rdf-syntax-grammar-20031010.xml'>      
]>
<rfc docName="draft-hanson-oauth-2fa-latest">
  <front>
    <title>OAuth 2.0 2nd Factor Credentials Grant</title>
    <author initials="J." surname="Hanson" fullname="Jared Hanson">
      <organization>Auth0 Inc.</organization>
      <address>       
        <email>jaredhanson@gmail.com</email> 
        <uri>http://www.jaredhanson.net/</uri>       
      </address>
    </author>
    <date/>
    <abstract>
      <t>This specification provides a framework for the use of strong
        authentication with OAuth 2.0.  Mechanisms are specified for initiating
        an authorization session.  New authorization grant types are defined
        that allow clients to obtain access tokens within the context of a
        strongly authenticated authorization session.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>Strong authentication is a method of access control that grants access
        only after multiple factors of authentication have been presented.  The
        factors typically fall into the following categories: knowledge
        (something you know), possession (something you have), and inherence
        (something you are).</t>
      
      <t>OAuth 2.0 <xref target="RFC6749"/> is an authorization framework that
        enables a third-party application to obtain limited access to a
        protected HTTP resource. In OAuth, those third-party applications are
        called clients; they access protected resources by presenting an access
        token to the HTTP resource.  Access tokens are issued to clients by an
        authorization server with the (sometimes implicit) approval of the
        resource owner. These access tokens are typically obtained by exchanging
        an authorization grant, which represents the authorization granted by
        the resource owner (or by a privileged administrator).</t>
        
      <t>This specification defineds a general framework for the use of strong
        authentication within OAuth 2.0.  It provides a generic mechanism for
        indicating when strong authentication is required.  It defines
        additional extension grant types that allow strong authentication
        credentials to be presented in order to obtain access tokens.</t>
      
      <t>This use of strong authentication allows authorization servers to
        implement correspondingly strong authorization policies, including
        step-up authentication and transaction confirmation.</t>
        
      <t>Authorization servers that implment support for resource owner
        password credentials can augment existing password infrastructure by
        requiring a strong second factor prior to issuing access tokens.</t>
        
      <t>Transaction confirmation can be used to increase the level of assurance
        prior to issuing tokens for highly privledged operations, such as a bank
        withdrawl.  For example, an end-user (resource owner) can grant an
        application (client) access to her account at a brokerage firm (resource
        server).  The application is authorized to obtain real-time stock quotes
        as well as place orders, and is issued both an access token and refresh
        token.  As a matter of policy, the access token can be used at the stock
        quote API and are valid for 24 hours.  Every 24 hour period, the refresh
        token is used to obtain a new access token.  The access token can also
        be used to place an order, but is subject to more stringent requirements.
        Using this extension, the refresh token can be used to initiate an
        authorization transaction which, once confirmed by the user, allows
        issuance of an access token that demonstrates strong authentication and
        has a limited lifetime.</t>
    </section>
    
    <section title="Authorization Session">
      
      <section title="Error Response">
        <t>In addition to the error codes defined in Section 5.2 of
          <xref target="RFC6749"/>, the following error codes are specific
          multi-factor authorization flows: 

          <list style="hanging"> 
            <t hangText="mfa_required"> <vspace blankLines="1"/>
              The authorization server requires multi-factor authentication.</t>
          </list> 
        </t>
        
        <t>When the error code is set to mfa_required, the following parameters
          are included with the response:
        
          <list style="hanging">
            <t hangText="mfa_token"> <vspace blankLines="1"/>
              REQUIRED.  The MFA token used to continue the authorization session.</t>
          </list>
        </t>
      </section>
      
    </section>
    
    <section title="Initiating Authorization using 1st Factor">
      
      <section title="Resource Owner Password Credentials">
        <section title="Access Token Request">
          <t>The client makes a request as described in in Section 4.3.2 of
            <xref target="RFC6749"/>.</t>
        </section>
        
        <section title="Access Token Response">
          <t>If the access token request is valid and authorized, the
            authorization server issues an access token and optional refresh
            token as described in in Section 5.1 of <xref target="RFC6749"/>.
            If the request failed client authentication or is invalid, the
            authorization server returns an error response as described in
            Section 5.2 of <xref target="RFC6749"/>.</t>
            
          <t>If the access token request is unauthorized because policy
            requires a second factor of authentication,...</t>
        </section>
      </section>
      
    </section>
    
    <section title="Obtaining Authorization using 2nd Factor">
      
      <section title="OTP Device">
        <section title="Access Token Request">
          <t>
            The client makes a request to the token endpoint by adding the
            following parameters using the "application/x-www-form-urlencoded"
            format per Appendix B with a character encoding of UTF-8 in the HTTP
            request entity-body:
          
            <list style="hanging">
              <t hangText="grant_type"><vspace blankLines="1"/>
                REQUIRED.  Value MUST be set to
                "http://auth0.com/oauth/grant-type/2fa-otp".</t>

              <t hangText="otp"> <vspace blankLines="1"/>
                REQUIRED.  The one-time password.</t>

              <t hangText="mfa_token"> <vspace blankLines="1"/>
                REQUIRED.  The MFA token received from the first factor access
                token response.</t>
            </list>
          </t>
        </section>
        
        <section title="Access Token Response">
          <t>If the access token request is valid and authorized, the
            authorization server issues an access token and optional refresh
            token as described in in Section 5.1 of <xref target="RFC6749"/>.
            If the request failed client authentication or is invalid, the
            authorization server returns an error response as described in
            Section 5.2 of <xref target="RFC6749"/>.</t>
        </section>
      </section>
      
      <section title="Out-of-Band Device">
        <section title="Access Token Request">
          <t>
            The client makes a request to the token endpoint by adding the
            following parameters using the "application/x-www-form-urlencoded"
            format per Appendix B with a character encoding of UTF-8 in the HTTP
            request entity-body:
          
            <list style="hanging">
              <t hangText="grant_type"><vspace blankLines="1"/>
                REQUIRED.  Value MUST be set to
                "http://auth0.com/oauth/grant-type/2fa-oob".</t>

              <t hangText="oob_code"> <vspace blankLines="1"/>
                REQUIRED.  The out-of-band verification code.</t>

              <t hangText="mfa_token"> <vspace blankLines="1"/>
                REQUIRED.  The MFA token received from the first factor access
                token response.</t>
            </list>
          </t>
        </section>
        
        <section title="Access Token Response">
          <t>If the access token request is valid and authorized, the
            authorization server issues an access token and optional refresh
            token as described in in Section 5.1 of <xref target="RFC6749"/>.
            If the request failed client authentication or is invalid, the
            authorization server returns an error response as described in
            Section 5.2 of <xref target="RFC6749"/>.</t>
        </section>
      </section>
      
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.6749"?>
    </references>
  </back>
</rfc>
