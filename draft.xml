<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>      
<!ENTITY rfc4287 SYSTEM 'bibxml/reference.RFC.4287.xml'>      
<!ENTITY xmlns SYSTEM 'bibxml/reference.W3C.REC-xml-names-19990114.xml'>      
<!ENTITY rdfsg SYSTEM 'bibxml/reference.W3C.WD-rdf-syntax-grammar-20031010.xml'>      
]>
<rfc docName="draft-hanson-oauth-mfa-latest">
  <front>
    <title>OAuth 2.0 Multi-Factor Authorization</title>
    <author initials="J." surname="Hanson" fullname="Jared Hanson">
      <organization>Auth0 Inc.</organization>
      <address>       
        <email>jaredhanson@gmail.com</email> 
        <uri>http://www.jaredhanson.net/</uri>       
      </address>
    </author>
    <date/>
    <abstract>
      <t>This specification provides a framework for the use of strong
        authorization with OAuth 2.0.  Mechanisms are specified for initiating
        an authorization session.  New authorization grant types are defined
        that allow clients to obtain access tokens within the context of a
        strongly authorized session.</t>
    </abstract>
  </front>
  <middle>
    
    <section title="Introduction">
      <t>Strong authorization is a method of access control that grants access
        only after multiple factors of authentication and/or authorization have
        been presented.  Authentication factors typically fall into the
        following categories: knowledge (something you know), possession
        (something you have), and inherence (something you are).  Strong
        authorization factors include transaction confirmation and multi-party
        authorization.</t>
      
      <t>OAuth 2.0 <xref target="RFC6749"/> is an authorization framework that
        enables a third-party application to obtain limited access to a
        protected HTTP resource. In OAuth, those third-party applications are
        called clients; they access protected resources by presenting an access
        token to the HTTP resource.  Access tokens are issued to clients by an
        authorization server with the (sometimes implicit) approval of the
        resource owner. These access tokens are typically obtained by exchanging
        an authorization grant, which represents the authorization granted by
        the resource owner (or by a privileged administrator).</t>
        
      <t>This specification defines a general framework for the use of strong
        authorization within OAuth 2.0.  It provides a generic mechanism for
        indicating when strong authorization is required.  It defines additional
        extension grant types that allow strong authorization credentials to be
        presented in order to obtain access tokens.</t>
      
      <t>This use of strong authorization allows authorization servers to
        implement correspondingly strong authorization policies, including
        step-up authentication and transaction confirmation.</t>
        
      <t>Authorization servers that implement support for resource owner
        password credentials can augment existing password infrastructure by
        requiring a strong second factor of authentication prior to issuing
        access tokens.</t>
        
      <t>Transaction confirmation can be used to increase the level of assurance
        prior to issuing tokens for highly privileged operations, such as a bank
        withdrawl.  For example, an end-user (resource owner) can grant an
        application (client) access to her account at a brokerage firm (resource
        server).  The application is authorized to obtain real-time stock quotes
        as well as place orders, and is issued both an access token and refresh
        token.  As a matter of policy, the access token can be used to obtain
        stock quotes and is valid for 24 hours.  Every 24 hour period, the
        refresh token is used to obtain a new access token, so that access to
        stock quotes is uninterrupted.  The access token can also be used to
        place an order, but is subject to more stringent security requirements.
        Using this extension, the refresh token can be used to initiate an
        authorization session which, once confirmed by the user, allows issuance
        of an access token that demonstrates strong authentication and has a
        limited lifetime.</t>
        
        <section title="Notational Conventions">
          <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
            "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
            "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
        </section>
        
        <section title="Terminology">
          <t>
            This specification also defines the following terms:
            
            <list style="hanging"> 
            <t hangText="MFA Token:"><vspace blankLines="1"/>
              A short-lived token representing an authorization session.</t>
            </list> 
          </t>
        </section>
        
        <section title="Protocol Flow">
          <figure title='Abstract Protocol Flow' anchor='Figure-1'>
            <artwork><![CDATA[
  +----------+
  | Resource |
  |  Owner   |
  |          |
  +----------+
     v    v
     |    |
    (A)  (D)
     |    |
     v    v
  +---------+                                      +---------------+
  |         |>-(B)--- Authorization Grant -------->|               |
  |         |                                      |               |
  |         |<-(C)-------- MFA Token -------------<|               |
  |         |                                      | Authorization |
  |         |>-(E)---- Strong Authz Grant -------->|     Server    |
  |         |             & MFA Token              |               |
  |         |                                      |               |
  | Client  |<-(F)------- Access Token -----------<|               |
  |         |                                      +---------------+
  |         |
  |         |                                      +---------------+
  |         |>-(G)------- Access Token ----------->|               |
  |         |                                      |    Resource   |
  |         |<-(H)---- Protected Resource --------<|     Server    |
  |         |                                      |               |
  +---------+                                      +---------------+
  ]]></artwork>
          </figure>
          <t>
            The abstract strong authorization flow illustrated in <xref target='Figure-1' />
            describes the interaction between the resource owner, resource server, client, and
            authorization server and includes the following steps:
          </t>
          <t>
            <list style='format (%C)'>
              <t>
                The client obtains authorization from the resource owner.  The
                authorization can be obtained directly from the resource owner (as
                shown), or preferably indirectly via the authorization server as an
                intermediary.  The resource owner's authorization is represented as
                an authorization grant.
              </t>
              <t>
                The client requests an access token by authenticating with the
                authorization server and presenting the authorization grant.
              </t>
              <t>
                The authorization server authenticates the client and validates the
                authorization grant, and if strong authorization is required,
                returns an error along with an MFA token.
              </t>
              <t>
                The resource owner provides the client with a strong authorization
                grant.
              </t>
              <t>
                The client requests an access token from the authorization server's
                token endpoint by including the strong authorization grant received
                from the resource owner along with the MFA token received during the
                prior access token request.  When making the request, the client
                authenticates with the authorization server.
              </t>
              <t>
                The authorization server authenticates the client and validates the
                MFA token and strong authorization grant, and if both are valid,
                issues an access token.
              </t>
              <t>
                The client requests the protected resource from the resource server
                and authenticates by presenting the access token.
              </t>
              <t>
                The resource server validates the access token, and if valid, serves
                the request.
              </t>
            </list>
          </t>
        </section>
    </section>
    
    <section title="Protocol Endpoints">
      <t>
        The strong authorization process utilizes two authorization server
        endpoints (HTTP resources):
      </t>
      <t>
        <list style='symbols'>
          <t>
            Token endpoint - used by the client to exchange a strong
            authorization grant for an access token, as described in Section
            3.2 of <xref target="RFC6749"/>.
          </t>
          <t>
            MFA Challenge endpoint - used by the client to obtain a strong
            authorization challenge, the answer to which can be used as a
            strong authorization grant.
          </t>
        </list>
      </t>
      
      <section title='Token Endpoint'>
        <t>
          The token endpoint is used by the client to obtain an access token by
          presenting its authorization grant or refresh token, as described in Section
          3.2 of <xref target="RFC6749"/>.
        </t>
        <t>
          The token endpoint is also used by the client to initiate (or
          continue) an authorization session.  If the authorization server
          determines that a token request is unauthorized, due to an
          insufficiently strong authorization grant, the authorization server
          responds with an error response as described in Section 5.2 of <xref target="RFC6749"/>.
        </t>
        <t>
          In addition to the error codes defined in Section 5.2 of <xref target="RFC6749"/>,
          the following error codes are specific for the strong authorization
          flow:
          
          <list style="hanging"> 
            <t hangText="mfa_required"> <vspace blankLines="1"/>
              The authorization grant is insufficiently strong,  The token
              request MAY succeed if repeated using a strong authorization
              grant.</t>
          </list> 
        </t>
        <t>In addition to the response parameters defined in Section 5.2 of <xref target="RFC6749"/>,
          the following parameters MUST be included in the response when the
          error code is set to mfa_required:
        
          <list style="hanging">
            <t hangText="mfa_token"> <vspace blankLines="1"/>
              REQUIRED.  The MFA token used to continue the authorization session.</t>
          </list>
        </t>
        <figure>
          <preamble>
            The following is a non-normative example token error response
            indicating that strong authorization is required:
          </preamble>
          <artwork><![CDATA[
HTTP/1.1 403 Forbidden
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "error":"mfa_required",
  "mfa_token": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjFlOWdkazcifQ.eyJpc3Mi
    OiJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwic3ViIjoiMjQ4Mjg5NzYxMDA
    xIiwiYXVkIjpbImh0dHA6Ly9zZXJ2ZXIuZXhhbXBsZS5jb20vdG9rZW4iLCJodH
    RwOi8vc2VydmVyLmV4YW1wbGUuY29tL2F1dGhlbnRpY2F0b3JzIl0sIm1mYSI6W
    yJvdHAiLCJvb2IiXSwiZXhwIjoxMzExMjgxOTcwLCJpYXQiOjEzMTEyODA5NzB9
    .IvjKKc54lHvAOCskyEUU8Ou_-8-oXKyFS5bbq-utZPA"
}
]]></artwork>
        </figure>
      </section>
      
      <section title='MFA Challenge Endpoint'>
        <t>
          The MFA challenge endpoint is used by the client to obtain a strong
          authorization challenge.  The answer to this challenge, typically
          obtained by interacting with the resource owner, is a strong
          authorization grant which can be used to obtain an access token by
          presenting it at the token endpoint.
        </t>
        <t>
          Use of the MFA challenge endpoint is OPTIONAL; if a client knows of
          a suitable authenticator through an out-of-band mechanism, it can
          obtain a strong authorization grant directly.
        </t>
        
        <section title='MFA Challenge Request' anchor="token-req">
          <t>
            The client makes a request to the MFA challenge endpoint by sending
            the following parameters using the <spanx style='verb'>application/x-www-form-urlencoded</spanx>
            format with a character encoding of UTF-8 in the HTTP request entity-body:
          </t>
          <t>
            <list style='hanging' hangIndent='6'>
              <t hangText='mfa_token'>
                <vspace />
                REQUIRED. The MFA token received from the authorization server.
              </t>
              <t hangText='challenge_type'>
                <vspace />
                OPTIONAL. The MFA challenge type strings that the client supports.
                The value of the challenge_type parameter is expressed as a list
                of space-delimited, case-insensitive strings.
              </t>
            </list>
          </t>
          <t>
            If the client was issued client credentials (or assigned other
            authentication requirements), the client MUST authenticate with the
            authorization server as described in Section 3.2.1 of <xref target="RFC6749"/>.
          </t>
          <figure>
            <preamble>
              For example, the client makes the following HTTPS request (line
              breaks are for display purposes only)::
            </preamble>
            <artwork><![CDATA[
POST /challenge HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

mfa_token=eyJhbGciOiJ...&challenge_type=otp%20oob
]]></artwork>
          </figure>
          <t>
            The authorization server MUST:
          </t>
          <t>
            <list style='symbols'>
              <t>
                require client authentication for confidential clients or for
                any client that was issued client credentials (or with other
                authentication requirements),
              </t>
              <t>
                authenticate the client if client authentication is included,
              </t>
              <t>
                ensure the MFA token was issued to the authenticated
                confidential client, or if the client is public, ensure the MFA
                token was issued to <spanx style='verb'>client_id</spanx> in the
                request,
              </t>
              <t>
                verify that the MFA token is valid, and
              </t>
              <t>
                restore the authorization session based on the claims in the MFA
                token.
              </t>
            </list>
          </t>
        </section>
        
        <section title='MFA Challenge Response' anchor="token-res">
          <t>
            If the MFA challenge request is valid and authorized, the
            authorization server selects an authorization mechanism that would
            satisfy the authorization session, issues a challenge, and
            constructs the response by adding the following parameters to the
            entity-body of the HTTP response with a 200 (OK) status code:
          </t>
          <t>
            <list style='hanging' hangIndent='6'>
              <t hangText='challenge_type'>
                <vspace />
                REQUIRED. The type of the MFA challenge issued.  Value is case
                insensitive.
              </t>
            </list>
          </t>
          <t>
            The parameters are included in the entity body of the HTTP response
            using the <spanx style='verb'>application/json</spanx> media type as
            defined by <xref target='RFC4627'/>.  The response MAY include
            additional parameters that are interpreted according to a challenge
            type definition.
          </t>
        </section>
      </section>
    </section>
    
    <section title="Obtaining Authorization using Strong Authorization">
      
      <section title="OTP Credentials Grant">
        <t>An one-time password is generated by an OTP device, which includes
          hardware devices as well as software-based OTP generators on devices
          such as mobile phones.
        </t>
        
        <section title="MFA Challenge Response">
          <t>
            If the resource owner has a registered OTP device, the
            authorization server signals the device, if possible, and responds
            with a challenge containing the following parameters:
          
            <list style="hanging">
              <t hangText="challenge_type"><vspace blankLines="1"/>
                REQUIRED.  Value MUST be set to "otp".</t>
            </list>
          </t>
        </section>
        
        <section title="User Interaction">
          <t>
            After receiving an OTP challenge, the client prompts or otherwise
            interacts with the resource owner to obtain a one-time password
            generated by a device in the posession of the resource owner.
          </t>
        </section>
        
        <section title="Access Token Request">
          <t>
            The client makes a request to the token endpoint by adding the
            following parameters using the "application/x-www-form-urlencoded"
            format per Appendix B with a character encoding of UTF-8 in the HTTP
            request entity-body:
          
            <list style="hanging">
              <t hangText="grant_type"><vspace blankLines="1"/>
                REQUIRED.  Value MUST be set to
                "http://auth0.com/oauth/grant-type/mfa-otp".</t>

              <t hangText="otp"> <vspace blankLines="1"/>
                REQUIRED.  The one-time password.</t>

              <t hangText="mfa_token"> <vspace blankLines="1"/>
                REQUIRED.  The MFA token received when initiating the
                authorization session.</t>
            </list>
          </t>
        </section>
        
        <section title="Access Token Response">
          <t>If the access token request is valid and authorized, the
            authorization server issues an access token and optional refresh
            token as described in in Section 5.1 of <xref target="RFC6749"/>.
            If the request failed client authentication or is invalid, the
            authorization server returns an error response as described in
            Section 5.2 of <xref target="RFC6749"/>.</t>
        </section>
      </section>
      
      <section title="Out-of-Band Verification Code Grant">
        <t>
          An out-of-band verification code is used to obtain authorization via
          an out-of-band authorization ceremony.  Such ceremonys may include
          out-of-band authenticators or multi-party authorization.
        </t>
        
        <t>An out-of-band authenticator is a device that can communicate
          securely with the authorization server over a secondary channel,
          such as SMS or push notification.
        </t>
        
        <t>
          Multi-party authorization requires approval from a second authorized
          user, in addition to the resource owner, before an action is allowed
          to take place.
        </t>
        
        <t>
          Out-of-band mechanisms are intentially open-ended, to allow for
          flexibility in how authorization is obtained.  The details of any
          out-out-band mechanism are beyond the scope of this specification.
        </t>
        
        <section title="MFA Challenge Response">
          <t>
            The authorization server orchestrates an out-of-band authorization
            interaction, and responds with a challenge containing the following
            parameters:
          
            <list style="hanging">
              <t hangText="challenge_type"><vspace blankLines="1"/>
                REQUIRED.  Value MUST be set to "oob".</t>
                
              <t hangText="oob_code"> <vspace blankLines="1"/>
                REQUIRED.  The out-of-band transaction code generated by the
                authorization server.  The out-of-band transaction code MUST
                expire shortly after it is issued to mitigate the risk of leaks.
                A maximum authorization code lifetime of 10 minutes is
                RECOMMENDED.</t>
            </list>
          </t>
        </section>
        
        <section title="User Interaction">
          <t>
            After receiving an out-of-band challenge, the client prompts or
            otherwise interacts with the resource owner to inform them of the
            ongoing authorization ceremony.
          </t>
        </section>
        
        <section title="Access Token Request">
          <t>
            The client makes a request to the token endpoint by adding the
            following parameters using the "application/x-www-form-urlencoded"
            format per Appendix B with a character encoding of UTF-8 in the HTTP
            request entity-body:
          
            <list style="hanging">
              <t hangText="grant_type"><vspace blankLines="1"/>
                REQUIRED.  Value MUST be set to
                "http://auth0.com/oauth/grant-type/mfa-oob".</t>

              <t hangText="oob_code"> <vspace blankLines="1"/>
                REQUIRED.  The out-of-band verification code.</t>

              <t hangText="mfa_token"> <vspace blankLines="1"/>
                REQUIRED.  The MFA token received when initiating the
                authorization session.</t>
            </list>
          </t>
        </section>
        
        <section title="Access Token Response">
          <t>If the access token request is valid and authorized, the
            authorization server issues an access token and optional refresh
            token as described in in Section 5.1 of <xref target="RFC6749"/>.
            If the request failed client authentication or is invalid, the
            authorization server returns an error response as described in
            Section 5.2 of <xref target="RFC6749"/>.</t>
            
          <t>
            In addition to the error codes defined in Section 5.2 of <xref target="RFC6749"/>,
            the following error codes are specific for the out-of-band
            verification code grant:
        
            <list style="hanging"> 
              <t hangText="authorization_pending"> <vspace blankLines="1"/>
                The authorization request is still pending as the authorization
                ceremony has not yet completed.  The client should repeat the
                Access Token Request to the token endpoint.</t>
              <t hangText="slow_down"> <vspace blankLines="1"/>
                The client is polling too quickly and should back off at a
                reasonable rate.</t>
              <t hangText="expired_token"> <vspace blankLines="1"/>
                The "oob_code" has expired.  The client will need to initiate
                a new authorization session.</t>
            </list> 
          </t>
        </section>
      </section>
      
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.4627"?>
      <?rfc include="reference.RFC.6749"?>
    </references>
  </back>
</rfc>
